// Generated by CoffeeScript 1.6.2
"use strict";
/**
 *
 *	@todo  complete _cleanup function
 *	@todo  check if the _bindDropHandler function can be simplified
 *
*/
(function($) {
  var JJMarkdownEditor;

  JJMarkdownEditor = (function() {
    JJMarkdownEditor.prototype.defaults = {
      preview: '#preview',
      parsingDelay: 200,
      hideDropzoneDelay: 1000,
      imageUrl: '/_md_/images/docimage',
      errorMsg: 'Sorry, but there has been an error.',
      contentGetter: 'val'
    };

    JJMarkdownEditor.prototype.$input = null;

    JJMarkdownEditor.prototype.$preview = null;

    JJMarkdownEditor.prototype.currentDrag = null;

    JJMarkdownEditor.prototype.inlineElementDragged = null;

    JJMarkdownEditor.prototype.dragCount = 0;

    JJMarkdownEditor.prototype.fileDragPermitted = true;

    JJMarkdownEditor.prototype.imageCache = [];

    JJMarkdownEditor.prototype.rules = {
      img: /\[img\s{1,}(.*?)\]/gi
    };

    JJMarkdownEditor.prototype.pendingAjax = [];

    function JJMarkdownEditor(selector, opts) {
      this.options = $.extend({}, this.defaults, opts);
      this.$input = selector instanceof jQuery ? selector : $(selector);
      this.$input._val = this.$input[this.options.contentGetter];
      this.$preview = this.options.preview instanceof jQuery ? this.options.preview : $(this.options.preview);
      this.initialize();
    }

    JJMarkdownEditor.setAsDraggable = function($els) {
      if (!JJMarkdownEditor.draggables) {
        JJMarkdownEditor.draggables = [];
      }
      $els = $els.filter('[data-md-tag]');
      if ($els.length) {
        JJMarkdownEditor.draggables.push($els);
        $els.on('dragstart', function(e) {
          return JJMarkdownEditor._activeDraggable = $(this).data('md-tag').replace('\\[', '[').replace('\\]', ']');
        });
        return $els.on('dragend', function(e) {
          return JJMarkdownEditor._activeDraggable = null;
        });
      }
    };

    JJMarkdownEditor.prototype._cleanupEvents = function() {
      this.$input.off('keyup scroll');
      this.$preview.off('scroll dragover dragleave');
      return this.$dropzone.off('drop');
    };

    JJMarkdownEditor.prototype.initialize = function() {
      var $els, $input, $preview, scrollArea, _this;

      $input = this.$input;
      $input.tabby().trigger('keyup');
      $preview = this.$preview;
      _this = this;
      this.delayTimeout = null;
      $input.off('keyup').on('keyup', function(e) {
        var $this, delayTimeout;

        $this = $(this);
        if (delayTimeout) {
          clearTimeout(delayTimeout);
        }
        return delayTimeout = setTimeout(function() {
          return _this.parseMarkdown();
        }, _this.options.parsingDelay);
      });
      $els = $input.add($preview);
      scrollArea = null;
      $els.on('scroll', function(e) {
        var $partner, $this;

        $this = $(this);
        $partner = $this.is($input) ? $preview : $input;
        if (scrollArea && scrollArea.is($partner)) {
          return false;
        }
        scrollArea = $this;
        $partner[0].scrollTop = this.scrollTop * $partner[0].scrollHeight / this.scrollHeight;
        return setTimeout(function() {
          return scrollArea = null;
        }, 200);
      });
      _this.parseMarkdown();
      this.dragAndDropSetup();
      return this;
    };

    JJMarkdownEditor.prototype.parseMarkdown = function() {
      var cap, id, imgIds, imgReplacements, markdown, markdownImageDfd, raw,
        _this = this;

      $.each(this.pendingAjax, function(i, pending) {
        if (pending.readyState !== 4 && pending.abort) {
          return pending.abort();
        }
      });
      raw = this.$input._val();
      markdown = marked(raw);
      imgIds = [];
      imgReplacements = [];
      while (cap = this.rules.img.exec(markdown)) {
        imgReplacements.push(cap);
        id = parseInt(cap[1]);
        if ($.inArray(id, imgIds) < 0) {
          imgIds.push(parseInt(cap[1]));
        }
      }
      markdownImageDfd = this.requestImagesByIds(imgIds);
      markdownImageDfd.done(function() {
        var cache, patternsUsed;

        patternsUsed = [];
        cache = _this.imageCache;
        return $.each(imgReplacements, function(i, replace) {
          return (function(replace) {
            return $.each(cache, function(j, obj) {
              var exp, pattern, tag;

              if (obj.id === parseInt(replace[1])) {
                pattern = replace[0].replace('[', '\\[').replace(']', '\\]');
                exp = new RegExp(pattern, 'gi');
                if ($.inArray(pattern, patternsUsed) < 0) {
                  while (cap = exp.exec(raw)) {
                    tag = _this.insertDataIntoRawTag(obj.tag, 'editor-pos', cap['index']);
                    tag = _this.insertDataIntoRawTag(tag, 'md-tag', pattern);
                    markdown = markdown.replace(replace[0], tag);
                  }
                }
                return patternsUsed.push(pattern);
              }
            });
          })(replace);
        });
      });
      this.pendingAjax.push(markdownImageDfd);
      return $.when(markdownImageDfd).then(function() {
        _this.pendingAjax = [];
        _this.$preview.trigger('markdown:replaced');
        _this.$preview.html(markdown);
        _this.inlineDragAndDropSetup();
        return window.picturefill();
      });
    };

    JJMarkdownEditor.prototype.requestImagesByIds = function(ids) {
      var dfd, reqIds, url,
        _this = this;

      dfd = new $.Deferred();
      _this = this;
      reqIds = [];
      $.each(ids, function(i, id) {
        return (function(id) {
          var found;

          found = false;
          $.each(_this.imageCache, function(j, obj) {
            if (obj.id === id) {
              return found = true;
            }
          });
          if (!found) {
            return reqIds.push(id);
          }
        })(id);
      });
      if (!reqIds.length) {
        dfd.resolve();
        return dfd;
      }
      url = this.options.imageUrl + '?ids=' + reqIds.join(',');
      return $.getJSON(url).done(function(data) {
        if ($.isArray(data)) {
          return _this.imageCache = _this.imageCache.concat(data);
        }
      });
    };

    JJMarkdownEditor.prototype.dragAndDropSetup = function() {
      var $preview, dropzoneDelay, _bindDropHandler, _setHideDropzoneTimeout,
        _this = this;

      $preview = this.$preview;
      dropzoneDelay = this.options.hideDropzoneDelay;
      $preview.on('dragover', function(e) {
        var $dropzone, $target, $temp, currDrag, func, isContainer;

        if (!_this.currentDrag) {
          _this.currentDrag = {
            $dropzone: $('<div>', {
              'class': 'dropzone'
            })
          };
          _this.dragCount++;
          $preview.data('dragid', _this.dragCount);
          _this.currentDrag.$dropzone.data('dragid', _this.dragCount);
        }
        _bindDropHandler();
        currDrag = _this.currentDrag;
        $dropzone = currDrag.$dropzone;
        if (currDrag.hideDropzoneTimeout) {
          clearTimeout(_this.currentDrag.hideDropzoneTimeout);
        }
        $target = $(e.target);
        if (!$target.is($dropzone)) {
          isContainer = false;
          if ($target.is($preview)) {
            isContainer = true;
          } else {
            if (!$target.attr('data-editor-pos')) {
              $temp = $target.closest('[data-editor-pos]');
              if ($temp.length) {
                $target = $temp;
              } else {
                $target = $preview;
                isContainer = true;
              }
            }
          }
          func = isContainer ? 'appendTo' : 'insertBefore';
          currDrag.$target = $target;
          return $dropzone[func].call($dropzone, $target);
        }
      });
      $preview.on('drop', function(e) {
        var $target;

        $target = $(e.originalEvent.originalTarget);
        if (_this.currentDrag && !$target.is(_this.currentDrag.$dropzone)) {
          _setHideDropzoneTimeout();
          return false;
        }
      });
      _setHideDropzoneTimeout = function() {
        if (!_this.currentDrag) {
          return;
        }
        clearTimeout(_this.currentDrag.hideDropzoneTimeout);
        return _this.currentDrag.hideDropzoneTimeout = setTimeout(function() {
          return _this.currentDrag.$dropzone.hide().detach().show();
        }, dropzoneDelay);
      };
      $preview.on('dragleave', _setHideDropzoneTimeout);
      return _bindDropHandler = function() {
        if (_this.currentDrag.dropHandlerBound) {
          return false;
        }
        _this.currentDrag.dropHandlerBound = true;
        return _this.currentDrag.$dropzone.on('drop', function(e) {
          var $dropzone, $progressBar, $target, dfdParse, el, errorMsg, files, formData, hideDropzoneTimeout, md, req, _xhrProgress;

          $dropzone = _this.currentDrag.$dropzone;
          $target = _this.currentDrag.$target;
          hideDropzoneTimeout = _this.currentDrag.hideDropzoneTimeout;
          if (hideDropzoneTimeout) {
            clearTimeout(hideDropzoneTimeout);
          }
          $dropzone.off('drop');
          _this.currentDrag = null;
          dfdParse = new $.Deferred();
          dfdParse.done(function() {
            $dropzone.remove();
            return _this.parseMarkdown();
          });
          if (el = _this.inlineElementDragged) {
            console.log(el);
            console.log('moving of inline element');
            _this.moveInlineElement($(el), $target);
            _this.inlineElementDragged = null;
            return dfdParse.resolve();
          } else if (md = JJMarkdownEditor._activeDraggable) {
            console.log('draggable from outside');
            _this.insertAtEditorPosByEl($target, md);
            JJMarkdownEditor._activeDraggable = null;
            return dfdParse.resolve();
          } else if (e.dataTransfer.files.length) {
            console.log('uploading');
            errorMsg = null;
            $progressBar = $('<div />', {
              "class": 'progress-bar'
            }).appendTo($dropzone);
            $progressBar.append($('<div />'));
            _xhrProgress = function(e) {
              var completed;

              if (e.lengthComputable) {
                completed = (e.loaded / e.total) * 100;
                return $progressBar.find('div').css('width', completed + '%');
              }
            };
            files = e.dataTransfer.files;
            formData = new FormData();
            $.each(files, function(index, file) {
              if (!file.type.match('image.*')) {
                return errorMsg = 'Sorry, but ' + file.name + ' is no image, bitch!';
              } else {
                return formData.append(file.name, file);
              }
            });
            if (errorMsg) {
              console.log(errorMsg);
              req = new $.Deferred();
              req.reject({
                error: errorMsg
              });
            } else {
              req = $.ajax({
                url: _this.options.imageUrl,
                data: formData,
                processData: false,
                contentType: false,
                type: 'POST',
                xhr: function() {
                  var xhr;

                  xhr = new XMLHttpRequest();
                  xhr.upload.addEventListener('progress', _xhrProgress, false);
                  return xhr;
                }
              });
            }
            return req.pipe(function(res) {
              if (!res.error) {
                return res;
              } else {
                return $.Deferred().reject(res);
              }
            }).fail(function(res) {
              return $dropzone.append('<p>' + _this.options.errorMsg + '</p>');
            }).done(function(data) {
              var imgs, nl, obj, rawMd, _i, _len;

              data = $.parseJSON(data);
              imgs = [];
              rawMd = '';
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                obj = data[_i];
                _this.imageCache.push(obj);
                rawMd += '[img ' + obj.id + ']';
              }
              nl = '  \n\n';
              _this.insertAtEditorPosByEl($target, rawMd + nl);
              return dfdParse.resolve();
            }).always(function() {
              return $progressBar.remove();
            });
          }
        });
      };
    };

    JJMarkdownEditor.prototype.inlineDragAndDropSetup = function() {
      var $imgs, $preview,
        _this = this;

      $preview = this.$preview;
      $imgs = $preview.find('[data-md-tag][data-picture]');
      _this = this;
      $imgs.on('dragstart', function(e) {
        return _this.inlineElementDragged = this;
      });
      $imgs.on('dragend', function(e) {
        return _this.inlineElementDragged = null;
      });
      return $preview.on('markdown:replace', function() {
        return $imgs.off('dragstart dragend');
      });
    };

    JJMarkdownEditor.prototype.moveInlineElement = function($el, $target) {
      var mdTag, pos;

      mdTag = $el.data('md-tag').replace(/\\/g, '');
      pos = $el.data('editor-pos');
      if (!($target.is(this.$preview)) && ($target.data('editor-pos') < pos)) {
        pos += mdTag.length;
      }
      this.insertAtEditorPosByEl($target, mdTag);
      return this.removeAtEditorPos(pos, mdTag);
    };

    JJMarkdownEditor.prototype.removeAtEditorPos = function(pos, md) {
      var val;

      val = this.$input._val();
      val = [val.slice(0, pos), val.slice(pos + md.length)].join('');
      return this.$input._val(val);
    };

    JJMarkdownEditor.prototype.insertAtEditorPosByEl = function($el, md) {
      var pos, val;

      val = this.$input._val();
      if ($el.is(this.$preview)) {
        val = val + md;
      } else {
        pos = $el.data('editor-pos');
        val = [val.slice(0, pos), md, val.slice(pos)].join('');
      }
      return this.$input._val(val);
    };

    JJMarkdownEditor.prototype.insertDataIntoRawTag = function(rawTag, dataName, dataVal) {
      var ltp;

      ltp = rawTag.indexOf('>');
      return [rawTag.slice(0, ltp), ' data-' + dataName + '="' + dataVal + '"', rawTag.slice(ltp)].join('');
    };

    return JJMarkdownEditor;

  })();
  return window.JJMarkdownEditor = JJMarkdownEditor;
})(jQuery);
