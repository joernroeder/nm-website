// Generated by CoffeeScript 1.6.2
"use strict";
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function($) {
  /*
  	class JJSimpleImagesUploadZone extends JJDropzone
  		defaults :
  			url : null
  			errorMsg: 'Sorry, but there has been an error.'
  			className: null
  */

  var JJDropzone, JJImageDropzone, JJSimpleImagesUploadZone, _ref;

  JJSimpleImagesUploadZone = (function() {
    JJSimpleImagesUploadZone.prototype.fileMatch = 'image.*';

    JJSimpleImagesUploadZone.prototype.cache = null;

    JJSimpleImagesUploadZone.prototype.defaults = {
      url: null,
      errorMsg: 'Sorry, but there has been an error.',
      className: null,
      dragFromDocument: false,
      responseHandler: function(data) {
        console.log('UPLOAD DATA');
        return console.log(data);
      }
    };

    JJSimpleImagesUploadZone.prototype.$dropzone = null;

    JJSimpleImagesUploadZone.prototype.maxAllowed = null;

    function JJSimpleImagesUploadZone(selector, opts) {
      var cache;

      cache = opts.cache ? opts.cache : {
        data: []
      };
      this.options = $.extend({}, this.defaults, opts);
      if (this.options.doneHandler) {
        this.doneHandler = this.options.doneHandler;
      }
      this.$dropzone = selector instanceof jQuery ? selector : $(selector);
      this.dragAndDropSetup();
    }

    JJSimpleImagesUploadZone.prototype.dragAndDropSetup = function() {
      var $dropzone,
        _this = this;

      $dropzone = this.$dropzone;
      $dropzone.on('dragenter', function(e) {
        return $(this).addClass('dragactive');
      });
      $dropzone.on('dragleave drop', function(e) {
        return $(this).removeClass('dragactive');
      });
      return $dropzone.on('drop', function(e) {
        var uploadDfd;

        if (e.dataTransfer.files.length) {
          uploadDfd = JJFileUpload["do"](e, $dropzone, _this.options.url, _this.options.errorMsg, _this.fileMatch, _this.maxAllowed);
          return uploadDfd.done(function(data) {
            data = $.parseJSON(data);
            return _this.options.responseHandler(data);
          });
        }
      });
    };

    return JJSimpleImagesUploadZone;

  })();
  JJDropzone = (function() {
    JJDropzone.prototype.defaults = {
      url: null,
      errorMsg: 'Sorry, but there has been an error.',
      className: null,
      dragFromDocument: false
    };

    JJDropzone.prototype.$dropzone = null;

    JJDropzone.prototype.fileMatch = null;

    JJDropzone.prototype.maxAllowed = null;

    function JJDropzone(selector, opts) {
      this.options = $.extend({}, this.defaults, opts);
      if (this.options.doneHandler) {
        this.doneHandler = this.options.doneHandler;
      }
      this.$dropzone = selector instanceof jQuery ? selector : $(selector);
      this.dragAndDropSetup();
    }

    JJDropzone.prototype.dragAndDropSetup = function() {
      var $dropzone,
        _this = this;

      $dropzone = this.$dropzone;
      $dropzone.on('dragenter', function(e) {
        return $(this).addClass('dragactive');
      });
      $dropzone.on('dragleave drop', function(e) {
        return $(this).removeClass('dragactive');
      });
      return $dropzone.on('drop', function(e) {
        var dfd, found, id, uploadDfd, url;

        if (_this.options.dragFromDocument && JJMarkdownEditor._activeDraggable && (id = _this.parseDraggableTag(JJMarkdownEditor._activeDraggable))) {
          dfd = new $.Deferred();
          found = false;
          $.each(_this.cache, function(i, obj) {
            if (obj.id === id) {
              found = true;
              return _this.doneHandler([obj]);
            }
          });
          if (!found) {
            url = _this.options.url + '?ids=' + id;
            return $.getJSON(url).done(function(data) {
              if ($.isArray(data)) {
                _this.addToCache(data);
                return _this.doneHandler(data);
              }
            });
          }
        } else if (e.dataTransfer.files.length) {
          uploadDfd = JJFileUpload["do"](e, $dropzone, _this.options.url, _this.options.errorMsg, _this.fileMatch, _this.maxAllowed);
          return uploadDfd.done(function(data) {
            data = $.parseJSON(data);
            _this.addToCache(data);
            return _this.doneHandler(data);
          });
        }
      });
    };

    JJDropzone.prototype.addToCache = function(data) {
      if (!this.cache) {
        this.cache = [];
      }
      return this.cache = this.cache.concat(data);
    };

    return JJDropzone;

  })();
  JJImageDropzone = (function(_super) {
    __extends(JJImageDropzone, _super);

    function JJImageDropzone() {
      _ref = JJImageDropzone.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    JJImageDropzone.prototype.fileMatch = 'image.*';

    JJImageDropzone.prototype.maxAllowed = 1;

    JJImageDropzone.prototype.cache = [];

    JJImageDropzone.prototype.parseDraggableTag = function(tag) {
      var cap;

      cap = SingleImgMarkdownParser.prototype.rule.exec(tag);
      if (cap) {
        return parseInt(cap[1]);
      }
      return null;
    };

    JJImageDropzone.prototype.doneHandler = function(data) {
      var out;

      data = data[0];
      this.$dropzone.html(data[0].tag);
      out = {
        id: data.id
      };
      if (this.options.className) {
        out.className = className;
      }
      if (this.options.onChange) {
        this.options.onChange(out);
      }
      return window.picturefill();
    };

    return JJImageDropzone;

  })(JJDropzone);
  return window.JJImageDropzone = JJImageDropzone;
})(jQuery);
