// Generated by CoffeeScript 1.6.2
"use strict";
var RadialGravity, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2PolygonShape, b2Settings, b2Vec, b2World;

b2Vec = Box2D.Common.Math.b2Vec2;

b2BodyDef = Box2D.Dynamics.b2BodyDef;

b2Body = Box2D.Dynamics.b2Body;

b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

b2Fixture = Box2D.Dynamics.b2Fixture;

b2World = Box2D.Dynamics.b2World;

b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

b2Settings = Box2D.Common.b2Settings;

RadialGravity = (function() {
  RadialGravity.prototype.width = 0;

  RadialGravity.prototype.height = 0;

  RadialGravity.prototype.intervalRate = 0;

  RadialGravity.prototype.adaptive = false;

  /*
  	 #
  	 # @param int intervalRate
  	 # @param boolean adaptive
  */


  function RadialGravity(intervalRate, adaptive) {
    this.intervalRate = intervalRate;
    this.adaptive = adaptive;
    this.init = function() {
      this.setBox2DSettings();
      this.world = new b2World(new b2Vec(0, 5), true);
      this.hasGravity = false;
      this.bodyCount = 0;
      this.bodyDef();
      this.fixDef();
      return this.world.CreateBody(this.bodyDef).CreateFixture(this.fixDef);
    };
    this.fixDef = function() {
      var fix;

      fix = new b2FixtureDef;
      fix.density = 1.0;
      fix.friction = 0;
      fix.restitution = 0;
      fix.shape = new b2PolygonShape;
      fix.shape.SetAsBox(this.width / this.scale() / 2, 10 / this.scale() / 2);
      return this.fixDef = fix;
    };
    this.bodyDef = function() {
      var body;

      body = new b2BodyDef;
      body.type = b2Body.b2_staticBody;
      body.position.x = this.width / 2 / this.scale();
      body.position.y = this.height / this.scale();
      return this.bodyDef = body;
    };
    this.setBox2DSettings = function() {
      return b2Settings.b2_timeToSleep = .5;
    };
    this.init();
  }

  /*
  	 # set canvas dimensions
  	 #
  	 # @param int width
  	 # @param int height
  	 #
  */


  RadialGravity.prototype.setDimensions = function(width, height) {
    this.width = width;
    this.height = height;
  };

  /*
  	 # returns the box2D scale
  	 #
  	 # @return int
  */


  RadialGravity.prototype.scaleFactor = 30;

  RadialGravity.prototype.scale = function() {
    return this.scaleFactor;
  };

  RadialGravity.prototype.setScale = function(val) {
    return this.scaleFactor = val;
  };

  RadialGravity.prototype.ready = function() {
    return this.hasGravity && this.bodyCount > 0;
  };

  RadialGravity.prototype.getState = function() {
    var b, d, distance, gravityDistance, gravityPosition, id, pos, state, vecSum;

    state = {};
    /*
    		gravity = null
    		while b
    			id = b.GetUserData()
    			if id is 'gravity'
    				gravity = b
    			b = b.m_next
    		return false if not gravity
    */

    gravityPosition = this.getGravityPosition();
    if (!gravityPosition) {
      return false;
    }
    /*
    		state['gravity'] = 
    			x: gravityPosition.x
    			y: gravityPosition.y
    			#a: gravity.GetAngle()
    */

    b = this.world.GetBodyList();
    while (b) {
      id = b.GetUserData();
      if (b.IsAwake() && b.IsActive() && typeof id !== 'undefined' && (id != null) && id !== 'gravity') {
        pos = b.GetPosition();
        gravityDistance = new b2Vec(0, 0);
        gravityDistance.Add(pos);
        gravityDistance.Subtract(gravityPosition);
        distance = gravityDistance.Length();
        gravityDistance.NegativeSelf();
        vecSum = Math.abs(pos.x + Math.abs(pos.y));
        gravityDistance.Multiply((1000 / vecSum) * 10 / distance);
        d = new b2Vec(gravityDistance.x, gravityDistance.y);
        b.ApplyForce(d, b.GetPosition());
        state[id] = {
          x: pos.x,
          y: pos.y,
          a: b.GetAngle()
        };
      }
      b = b.m_next;
    }
    return state;
  };

  RadialGravity.prototype.update = function() {
    var now, stepRate;

    now = Date.now();
    stepRate = this.adaptive ? now - this.timestamp / 1000 : 1 / this.intervalRate;
    this.world.Step(stepRate, 10, 10);
    this.world.ClearForces();
    return Date.now() - now;
  };

  /*
  	 # creates a gravity box2D-Element
  	 #
  	 # @param gravity GravityCenter
  	 #
  */


  RadialGravity.prototype.gravity = null;

  RadialGravity.prototype.gravityPosition = null;

  RadialGravity.prototype.getGravityPosition = function() {
    var p;

    p = false;
    if (this.gravity) {
      p = this.gravity.GetPosition();
    } else if (this.gravityPosition) {
      p = this.gravityPosition;
    }
    return p;
  };

  RadialGravity.prototype.setGravity = function(gravity) {
    this.gravityPosition = new b2Vec(3, 3);
    return this.hasGravity = true;
  };

  /*
  	setGravity: (gravity) ->
  		if @gravity
  			@updateGravity gravity
  			return
  
  		#postMessage gravity
  		@bodyDef.type = b2Body.b2_staticBody
  
  		@fixDef.restitution = 0
  		@fixDef.density = 500
  		@fixDef.friction = 1
  		@fixDef.shape = new b2PolygonShape
  		@fixDef.shape.SetAsBox gravity.width / 2 , gravity.height / 2
  
  		@bodyDef.position.x = gravity.x
  		@bodyDef.position.y = gravity.y
  		@bodyDef.userData = 'gravity'
  
  		@world.CreateBody(@bodyDef).CreateFixture @fixDef
  
  		@gravity = @getGravity()
  
  		@hasGravity = true
  */


  RadialGravity.prototype.updateGravity = function(gravity) {
    var pos;

    if (this.gravity) {
      pos = new b2Vec(gravity.x, gravity.y);
      this.gravity.position.x = gravity.x;
      return this.gravity.position.y = gravity.y;
    }
  };

  RadialGravity.prototype.getGravity = function() {
    var b, id;

    b = this.world.GetBodyList();
    while (b) {
      id = b.GetUserData();
      if (id === 'gravity') {
        return b;
      }
      b = b.m_next;
    }
    return false;
  };

  /*
  	 # creates the bodies and sets the this.ready flag
  	 #
  	 # @param object id: RectangleEntity
  */


  RadialGravity.prototype.setBodies = function(entities) {
    var entity, id, _results;

    _results = [];
    for (id in entities) {
      entity = entities[id];
      _results.push(setBody(id, entity));
    }
    return _results;
  };

  /*
  	 # creates a body
  */


  RadialGravity.prototype.setBody = function(id, entity) {
    this.bodyDef.type = b2Body.b2_dynamicBody;
    if (id === 'gravity') {
      return this.setGravity(entity);
    } else {
      this.fixDef.restitution = 0;
      this.fixDef.density = 1;
      this.fixDef.friction = 20;
      this.fixDef.shape = new b2PolygonShape;
      this.fixDef.shape.SetAsBox(entity.width / 2, entity.height / 2);
      this.bodyDef.position.x = entity.x;
      this.bodyDef.position.y = entity.y;
      this.bodyDef.userData = entity.id;
      this.bodyDef.allowSleep = true;
      this.bodyDef.fixedRotation = true;
      this.world.CreateBody(this.bodyDef).CreateFixture(this.fixDef);
      return this.bodyCount++;
    }
  };

  return RadialGravity;

})();
