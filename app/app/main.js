// Generated by CoffeeScript 1.6.2
require(['app', 'router', 'modules/Project', 'modules/Person', 'modules/Excursion', 'modules/Workshop', 'modules/Exhibition', 'modules/CalendarEntry'], function(app, Router, Project, Person, Excursion, Workshop, Exhibition, CalendarEntry) {
  Backbone.JJRelational.Config.work_with_store = true;
  app.Router = new Router();
  app.Layout;
  app.PageInfos = {};
  app.Collections = {};
  app.Config = {
    ProjectTypes: ['Project', 'Excursion', 'Workshop', 'Exhibition'],
    StoreHooks: ['Project', 'Excursion', 'Workshop', 'Exhibition', 'Person', 'CalendarEntry'],
    UrlSuffixes: {
      about_persons: '?search=IsExternal:0'
    },
    Featured: {
      present: {
        flag: false,
        types: []
      },
      domName: function(className) {
        return 'featured-' + className.toLowerCase();
      },
      urlSuffix: '?' + JJRestApi.objToUrlString({
        search: {
          IsFeatured: 1
        },
        context: 'view.portfolio_init'
      })
    },
    Portfolio: {
      present: {
        flag: false,
        types: []
      },
      domName: function(className) {
        return 'portfolio-' + className.toLowerCase();
      },
      urlSuffix: '?' + JJRestApi.objToUrlString({
        search: {
          IsPortfolio: 1
        },
        context: 'view.portfolio_init'
      })
    },
    Calendar: {
      upcoming: false,
      whole: false
    },
    Person: {
      about_present: false
    }
  };
  app.bindListeners = function() {
    var storeHook, _fn, _i, _len, _ref;

    _ref = app.Config.StoreHooks;
    _fn = function(storeHook) {
      return Backbone.JJStore.Events.bind('added:' + storeHook, function(model) {
        var coll;

        coll = app.Collections[storeHook];
        if (coll) {
          return coll.add(model);
        }
      });
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      storeHook = _ref[_i];
      _fn(storeHook);
    }
    return true;
  };
  app.handleFetchedModels = function(type, models, options) {
    var MType, model, _i, _len, _results;

    options = options || {};
    MType = JJRestApi.Model(type);
    models = _.isArray(models) ? models : [models];
    _results = [];
    for (_i = 0, _len = models.length; _i < _len; _i++) {
      model = models[_i];
      _results.push(new MType(model));
    }
    return _results;
  };
  app.bindListeners();
  $(function() {
    return JJRestApi.bootstrapWithStructure(function() {
      var buildCollections;

      buildCollections = function(names) {
        var CollClass, name, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          CollClass = JJRestApi.Collection(name);
          _results.push(app.Collections[name] = new CollClass());
        }
        return _results;
      };
      buildCollections(app.Config.StoreHooks);
      return Backbone.history.start({
        pushState: true
      });
    });
  });
  return $(document).on('click', 'a:not([data-bypass])', function(evt) {
    var href, protocol;

    href = $(this).attr('href');
    protocol = this.protocol + '//';
    if (href && href.slice(0, protocol.length) !== protocol && href.indexOf('javascript:') !== 0) {
      evt.preventDefault();
      return Backbone.history.navigate(href, true);
    }
  });
});
