// Generated by CoffeeScript 1.6.2
define(['app', 'modules/Project', 'modules/Person', 'modules/Excursion', 'modules/Workshop', 'modules/Exhibition', 'modules/CalendarEntry', 'modules/PageError'], function(app, Project, Person, Excursion, Workshop, Exhibition, CalendarEntry, PageError) {
  /**
  	 *
  	 *	All the URL routing is done here.
  	 *	Our router also serves as the data retrieving interface. All data getting logic is
  	 *	handled here. 
  	 *
  */

  var Router;

  Router = Backbone.Router.extend({
    routes: {
      '': 'index',
      'about/': 'showAboutPage',
      'about/student/:nameSlug/': 'showStudentPage',
      'about/student/:nameSlug/:uglyHash/': 'showStudentDetailed',
      'portfolio/': 'showPortfolio',
      'portfolio/:slug/': 'showPortfolioDetailed',
      '*url/': 'catchAllRoute'
    },
    index: function(hash) {
      console.info('index');
      return this.getFeaturedData(function() {
        return console.log('All data is there. Serialize data in view and render it.');
      });
    },
    showAboutPage: function() {
      return console.info('about page');
    },
    showStudentPage: function(nameSlug) {
      console.info('show student page of %s', nameSlug);
      return console.info('check if student has custom template');
    },
    showStudentDetailed: function(nameSlug, uglyHash) {
      console.info('show project %s of %s', uglyHash, nameSlug);
      return console.info('check if student has custom template for details');
    },
    showPortfolio: function() {
      return console.info('show portfolio');
    },
    showPortfolioDetailed: function(slug) {
      console.info('portfolio with uglyHash/Filter %s', slug);
      return console.info('check if slug is filter or uglyHash and handle page accordingly');
    },
    catchAllRoute: function(url) {
      return app.Layout = app.useLayout('main', {
        views: {
          '': new PageError.Views.FourOhFour({
            attributes: {
              'data-url': url
            }
          })
        }
      });
    },
    getFeaturedData: function(callback) {
      var checkAndCallback, dones, feat, options, projectType, projectTypes, _i, _len, _results;

      feat = app.Config.Featured;
      projectTypes = app.Config.ProjectTypes;
      dones = {};
      checkAndCallback = function() {
        var done, projectType, _i, _len;

        done = true;
        for (_i = 0, _len = projectTypes.length; _i < _len; _i++) {
          projectType = projectTypes[_i];
          if (!dones[projectType]) {
            done = false;
          }
        }
        if (done) {
          feat.present = true;
          return callback();
        }
      };
      if (!feat.present) {
        _results = [];
        for (_i = 0, _len = projectTypes.length; _i < _len; _i++) {
          projectType = projectTypes[_i];
          options = {
            type: projectType,
            name: feat.domName(projectType),
            urlSuffix: feat.urlSuffix
          };
          _results.push(JJRestApi.getFromDomOrApi(projectType, options, function(data, _opts) {
            dones[_opts.type] = true;
            return checkAndCallback();
          }));
        }
        return _results;
      } else {
        return callback();
      }
    }
  });
  return Router;
});
