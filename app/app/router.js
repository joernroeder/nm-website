// Generated by CoffeeScript 1.6.2
define(['app', 'modules/Project', 'modules/Person', 'modules/Excursion', 'modules/Workshop', 'modules/Exhibition', 'modules/CalendarEntry', 'modules/PageError', 'modules/Portfolio', 'modules/Calendar', 'modules/About'], function(app, Project, Person, Excursion, Workshop, Exhibition, CalendarEntry, PageError, Portfolio, Calendar, About) {
  /**
  	 *
  	 *	All the URL routing is done here.
  	 *	Our router also serves as the data retrieving interface. All data getting logic is
  	 *	handled here. 
  	 *
  */

  var DataRetrieval, Router, called_twice;

  called_twice = false;
  Router = Backbone.Router.extend({
    routes: {
      '': 'index',
      'about/': 'showAboutPage',
      'about/:nameSlug/': 'showPersonPage',
      'about/:nameSlug/:uglyHash/': 'showPersonDetailed',
      'portfolio/': 'showPortfolio',
      'portfolio/:uglyHash/': 'showPortfolioDetailed',
      'calendar/': 'showCalendar',
      'calendar/:urlHash/': 'showCalendarDetailed',
      'login/': 'showLoginForm',
      'logout/': 'doLogout',
      '*url/': 'catchAllRoute'
    },
    index: function(hash) {
      var config, layout,
        _this = this;

      config = app.Config;
      layout = app.useLayout('index');
      DataRetrieval.forProjectsOverview(config.Featured).done(function() {
        var modelsArray;

        modelsArray = _this.getProjectTypeModels({
          IsFeatured: true
        });
        return _this.showGravityViewForModels(modelsArray, layout);
      });
      return DataRetrieval.forCalendar('upcoming').done(function() {
        var calendarContainer;

        calendarContainer = new Calendar.Views.UpcomingContainer({
          collection: app.Collections.CalendarEntry
        });
        return layout.setViewAndRenderMaybe('#upcoming-calendar', calendarContainer);
      });
    },
    showAboutPage: function() {
      var checkAndRender, groupImageDfd, layout, personsDfd;

      layout = app.useLayout('main');
      checkAndRender = function() {
        var view;

        if (groupImage && persons) {
          view = new About.Views.Gravity({
            groupImage: groupImage,
            persons: persons
          });
          return layout.setViewAndRenderMaybe('', view);
        }
      };
      groupImageDfd = DataRetrieval.forRandomGroupImage();
      personsDfd = DataRetrieval.forPersonsOverview();
      $.when(groupImageDfd, personsDfd).done(function(image) {
        var coll, persons, view;

        image = image.length ? image[0] : null;
        coll = app.Collections['Person'];
        persons = {
          students: coll.where({
            IsStudent: true
          }),
          alumnis: coll.where({
            IsAlumni: true
          }),
          employees: coll.where({
            IsEmployee: true
          })
        };
        view = new About.Views.Gravity({
          groupImage: image,
          persons: persons
        });
        return layout.setViewAndRenderMaybe('', view);
      });
      return false;
    },
    showPersonPage: function(nameSlug) {
      return DataRetrieval.forDetailedObject('Person', nameSlug, function(model) {
        return console.log(model);
      });
    },
    showPersonDetailed: function(nameSlug, uglyHash) {
      console.info('show project %s of %s', nameSlug);
      return console.info('check if student has custom template for details');
    },
    showPortfolio: function() {
      var layout,
        _this = this;

      layout = app.useLayout('portfolio');
      return DataRetrieval.forProjectsOverview(app.Config.Portfolio, function() {
        var modelsArray;

        modelsArray = _this.getProjectTypeModels({
          IsPortfolio: true
        });
        return _this.showGravityViewForModels(modelsArray, layout);
      });
    },
    showPortfolioDetailed: function(uglyHash) {
      var classType, config;

      config = app.Config;
      classType = config.ClassEnc[uglyHash.substr(0, 1)];
      if (classType) {
        return DataRetrieval.forDetailedObject(classType, uglyHash, function(model) {
          var detailView, layout;

          if (!model) {
            return this.fourOhFour();
          }
          layout = app.useLayout('main');
          detailView = new Portfolio.Views.Detail({
            model: model
          });
          return layout.setViewAndRenderMaybe('', detailView);
        });
      } else {
        return this.fourOhFour();
      }
    },
    showCalendar: function() {
      return console.info('show whole calendar');
    },
    showCalendarDetailed: function(urlHash) {
      var _this = this;

      console.info('get calendar detailed data with slug and show');
      return DataRetrieval.forDetailedObject('CalendarEntry', urlHash, function(model) {
        var detailView, layout;

        if (!model) {
          return _this.fourOhFour();
        }
        layout = app.useLayout('main');
        detailView = new Calendar.Views.Detail({
          model: model
        });
        return layout.setViewAndRenderMaybe('', detailView);
      });
    },
    catchAllRoute: function(url) {
      return console.log('catch all route');
    },
    fourOhFour: function() {
      var errorView, layout;

      layout = app.useLayout('main');
      errorView = new PageError.Views.FourOhFour({
        attributes: {
          'data-url': window.location.href
        }
      });
      return layout.setViewAndRenderMaybe('', errorView);
    },
    showGravityViewForModels: function(modelsArray, layout) {
      var gravityContainer;

      gravityContainer = new Portfolio.Views.GravityContainer({
        collection: modelsArray
      });
      return layout.setViewAndRenderMaybe('#gravity', gravityContainer);
    },
    getProjectTypeModels: function(where) {
      var projectType, returnArray, _i, _len, _ref;

      returnArray = [];
      _ref = app.Config.ProjectTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        projectType = _ref[_i];
        returnArray = returnArray.concat(app.Collections[projectType].where(where));
      }
      return returnArray;
    }
  });
  DataRetrieval = {
    forProjectsOverview: function(configObj) {
      var dfds, present, projectType, projectTypes, returnDfd, _fn, _i, _len;

      present = configObj.present;
      projectTypes = app.Config.ProjectTypes;
      returnDfd = new $.Deferred();
      if (!present.flag) {
        dfds = [];
        _fn = function(projectType) {
          var options;

          options = {
            name: configObj.domName(projectType),
            urlSuffix: configObj.urlSuffix
          };
          return dfds.push(JJRestApi.getFromDomOrApi(projectType, options).done(function(data) {
            return app.handleFetchedModels(projectType, data);
          }));
        };
        for (_i = 0, _len = projectTypes.length; _i < _len; _i++) {
          projectType = projectTypes[_i];
          _fn(projectType);
        }
        $.when.apply(this, dfds).done(function() {
          present.flag = true;
          return returnDfd.resolve();
        });
      } else {
        returnDfd.resolve();
      }
      return returnDfd.promise();
    },
    forCalendar: function(type) {
      var config, dfd, options;

      config = app.Config.Calendar[type];
      dfd = new $.Deferred();
      if (!config.flag) {
        options = _.clone(config);
        options.name = type + '-calendar';
        JJRestApi.getFromDomOrApi('CalendarEntry', options).done(function(data) {
          var item, _i, _len;

          if (type === 'upcoming') {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              item.IsUpcoming = true;
            }
          }
          app.handleFetchedModels('CalendarEntry', data);
          config.flag = true;
          if (type === 'whole') {
            app.Config.Calendar.upcoming.flag = true;
          }
          return dfd.resolve();
        });
      } else {
        dfd.resolve();
      }
      return dfd.promise();
    },
    forPersonsOverview: function() {
      var config, dfd, options;

      config = app.Config.Person;
      dfd = new $.Deferred();
      if (!config.about_present) {
        options = _.clone(config);
        JJRestApi.getFromDomOrApi('Person', options).done(function(data) {
          config.about_present = true;
          app.handleFetchedModels('Person', data);
          return dfd.resolve();
        });
      } else {
        dfd.resolve();
      }
      return dfd;
    },
    forDetailedObject: function(classType, slug, callback) {
      var callbackWithModel, coll, configObj, existModel, options, whereStatement;

      configObj = app.Config.Detail[classType];
      coll = app.Collections[classType];
      whereStatement = configObj.where(slug);
      callbackWithModel = function(model) {
        callback(model);
        return model._isCompletelyFetched = true;
      };
      existModel = coll.findWhere(whereStatement);
      if (existModel) {
        if (existModel._isCompletelyFetched) {
          return callback(existModel);
        }
        return this.fetchExistingModelCompletely(existModel, callback);
      } else {
        options = {
          name: configObj.domName,
          urlSuffix: configObj.urlSuffix(slug)
        };
        return JJRestApi.getFromDomOrApi(classType, options, function(data) {
          var model;

          data = _.isArray(data) ? data : [data];
          if (data.length === 1) {
            model = app.handleFetchedModel(classType, data[0]);
            return callbackWithModel(model);
          } else {
            return callback(null);
          }
        });
      }
    },
    forRandomGroupImage: function() {
      var dfd, getRandom, pageInfos;

      pageInfos = app.PageInfos;
      dfd = new $.Deferred();
      getRandom = function() {
        var groupImages;

        groupImages = pageInfos.GroupImages;
        if (groupImages.length > 0) {
          return groupImages[Math.floor(Math.random() * groupImages.length)];
        }
        return null;
      };
      if (!pageInfos.GroupImages) {
        JJRestApi.getFromDomOrApi('GroupImage').done(function(data) {
          pageInfos.GroupImages = data;
          return dfd.resolve(getRandom());
        });
      } else {
        dfd.resolve(getRandom());
      }
      return dfd.promise();
    },
    fetchExistingModelCompletely: function(existModel, callback) {
      return existModel.fetch({
        success: function(model) {
          callback(model);
          return model._isCompletelyFetched = true;
        }
      });
    }
  };
  return Router;
});
