// Generated by CoffeeScript 1.6.2
define(['jquery', 'underscore', 'backbone', 'handlebars', 'plugins/backbone.layoutmanager', 'plugins/backbone.JJRelational', 'plugins/backbone.JJRestApi', 'responsiveimage/picturefill'], function($, _, Backbone, Handlebars) {
  var JST, app;

  app = {
    root: '/',
    pendingTemplateReqs: {}
  };
  JST = window.JST = window.JST || {};
  Backbone.NMLayout = Backbone.Layout.extend({
    setViewAndRenderMaybe: function(selector, view) {
      this.setView(selector, view);
      if (this.__manager__.hasRendered) {
        return view.render();
      }
    },
    insertViewAndRenderMaybe: function(selector, view) {
      this.insertView(selector, view);
      if (this.__manager__.hasRendered) {
        return view.render();
      }
    }
  });
  Backbone.Layout.configure({
    manage: true,
    prefix: 'app/templates/',
    pendingAjaxRequests: {},
    fetch: function(path) {
      var dfd, done, replacedPath;

      done = void 0;
      replacedPath = path.replace(Backbone.Layout.prototype.options.prefix, '');
      if (replacedPath.indexOf('/') === 0) {
        path = replacedPath.substring(1);
      } else {
        path = path + '.html';
      }
      if (!JST[path]) {
        done = this.async();
        if (dfd = app.pendingTemplateReqs[path]) {
          dfd.then(function() {
            return done(JST[path]);
          });
        } else {
          dfd = $.ajax({
            url: app.root + 'app/' + path
          });
          app.pendingTemplateReqs[path] = dfd;
          dfd.then(function(contents) {
            JST[path] = Handlebars.compile(contents);
            JST[path].__compiled__ = true;
            delete app.pendingTemplateReqs[path];
            return done(JST[path]);
          });
        }
        return dfd;
      }
      /*
      				unless JST[path].__compiled__
      					JST[path] = Handlebars.compile JST[path]
      					JST[path].__compiled__ = true
      */

      return JST[path];
    }
  });
  return _.extend(app, {
    module: function(additionalProps) {
      return _.extend({
        Views: {}
      }, additionalProps);
    },
    useLayout: function(name, options) {
      var $body, currentLayout, customClass, l, layout;

      options = options || {};
      customClass = options.customClass ? options.customClass : name;
      if (this.layout && this.layout.getAllOptions().template === 'layouts/' + name) {
        l = this.layout;
        if (l.customClass) {
          l.$el.removeClass(l.customClass);
        }
        if (customClass) {
          l.customClass = customClass;
          l.$el.addClass(customClass);
        }
        return this.layout;
      }
      if (this.layout) {
        this.layout.remove();
      }
      layout = new Backbone.NMLayout(_.extend({
        template: 'layouts/' + name,
        className: 'layout ' + customClass,
        id: 'layout'
      }, options));
      $('#main').empty().append(layout.el);
      $(layout.el).css('height', '100%');
      currentLayout = this.currentLayoutName;
      $body = $('body');
      if (currentLayout) {
        $body.removeClass(currentLayout);
      }
      $body.addClass(name);
      this.currentLayoutName = name;
      layout.render();
      this.layout = layout;
      return layout;
    }
  }, Backbone.Events);
});
