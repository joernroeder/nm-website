// Generated by CoffeeScript 1.6.3
define(['app', 'modules/JJPackery'], function(app, JJPackery) {
  var Portfolio;
  Portfolio = app.module();
  Portfolio.Config = {
    person_group_length: 4,
    group_project_title: 'Group project'
  };
  Portfolio.Views.PackeryContainer = JJPackery.Views.Container.extend({
    cleanup: function() {
      console.log('foo12');
      return Backbone.Events.off('search', this.handleSearch);
    },
    initialize: function() {
      return Backbone.Events.on('search', this.handleSearch, this);
    },
    handleSearch: function(searchResults) {
      if (this.__manager__.hasRendered) {
        return this.triggerSearchOnChildren(searchResults);
      } else {
        this.searchResults = searchResults;
        return this.doSearchAfterRender = true;
      }
    },
    triggerSearchOnChildren: function(searchResults) {
      var _this = this;
      console.log('search on children');
      console.log(searchResults);
      return _.each(this.views['.packery'], function(childView) {
        var found, method, model;
        model = childView.model;
        if (!searchResults) {
          return _this.packery.showElement(childView.el);
        } else {
          found = _.find(searchResults, function(result) {
            return result === childView.model;
          });
          method = found ? 'showElement' : 'hideElement';
          return _this.packery[method](childView.el);
        }
      });
    },
    beforeRender: function() {
      var model, modelArray, _i, _len, _results;
      console.log('portfolio before render');
      modelArray = this.collection;
      if (modelArray) {
        _results = [];
        for (_i = 0, _len = modelArray.length; _i < _len; _i++) {
          model = modelArray[_i];
          _results.push(this.insertView('.packery', new Portfolio.Views.ListItem({
            model: model,
            linkTo: this.options.linkTo
          })));
        }
        return _results;
      }
    },
    _afterRender: function() {
      if (this.doSearchAfterRender) {
        this.triggerSearchOnChildren(this.searchResults);
        this.doSearchAfterRender = false;
        return this.searchResults = null;
      }
    }
  });
  Portfolio.Views.ListItem = Backbone.View.extend({
    tagName: 'article',
    className: 'packery-item resizable',
    template: 'packery-list-item',
    doShow: function() {
      console.log('showing %o', this.model);
      return this.$el.removeClass('hidden');
    },
    doHide: function() {
      console.log('hiding %o', this.model);
      return this.$el.addClass('hidden');
    },
    serialize: function() {
      var data;
      data = this.model ? this.model.toJSON() : {};
      data.Persons = _.sortBy(data.Persons, function(person) {
        return person.Surname;
      });
      data.LinkTo = this.options.linkTo;
      return data;
    }
  });
  Portfolio.Views.Detail = Backbone.View.extend({
    tagName: 'article',
    className: 'portfolio-detail',
    template: 'portfolio-detail',
    beforeRender: function() {
      this._codeEv = $.Event('code:kickoff', {
        bubbles: false
      });
      return this._afterRenderEv = $.Event('portfoliodetail:rendered');
    },
    afterRender: function() {
      var $doc;
      window.picturefill();
      $doc = $(document);
      $doc.trigger(this._codeEv);
      return $doc.trigger(this._afterRenderEv);
    },
    appropriateUrl: function(projectItem, person) {
      if (person == null) {
        person = false;
      }
    },
    serialize: function() {
      var coll, json, projType, types, _i, _len, _ref,
        _this = this;
      _ref = ['Projects', 'ChildProjects', 'ParentProjects', 'Exhibitions', 'Workshops', 'Excursions'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        projType = _ref[_i];
        coll = this.model.get(projType);
        if (coll) {
          coll.each(function(m) {
            return m.setTempUrlPrefix(_this.ownedByPerson);
          });
        }
      }
      json = this.model ? this.model.toJSON() : {};
      types = ['Projects', 'ChildProjects', 'ParentProjects'];
      json.Persons = _.sortBy(json.Persons, function(person) {
        return person.Surname;
      });
      if (parseInt(json.Persons.length) > parseInt(Portfolio.Config.person_group_length)) {
        json.IsGroup = true;
      }
      json.combinedProjects = [];
      _.each(types, function(type) {
        if (_.isArray(json[type])) {
          return json.combinedProjects = json.combinedProjects.concat(json[type]);
        }
      });
      console.log(json);
      return json;
    }
  });
  Handlebars.registerHelper('nameSummary', function(persons) {
    var conf, length, out;
    conf = Portfolio.Config;
    if (!(persons.length <= conf.person_group_length)) {
      return conf.group_project_title;
    }
    out = '';
    length = persons.length;
    _.each(persons, function(person, i) {
      out += '<a href="/about/' + person.UrlSlug + '/">' + person.FirstName + ' ' + (person.Surname ? person.Surname : '') + '</a>';
      if (i < (length - 2)) {
        return out += ', ';
      } else if (i < (length - 1)) {
        return out += ' &amp; ';
      }
    });
    return out;
  });
  Handlebars.registerHelper('niceDate', function(model, forceYear) {
    var out;
    if (!(model.DateRangeNice || model.FrontendDate)) {
      return false;
    }
    out = '';
    if (model.DateRangeNice) {
      out += model.DateRangeNice;
    } else if (model.FrontendDate) {
      if (!forceYear) {
        out += model.FrontendDate;
      } else {
        out += model.FrontendDate.split(' ')[1];
      }
    }
    return out;
  });
  Handlebars.registerHelper('teaserMeta', function() {
    var nameSummary, niceDate;
    niceDate = Handlebars.helpers.niceDate(this, true);
    if (this.ClassName === 'Project') {
      nameSummary = Handlebars.helpers.nameSummary(this.Persons);
      return "" + nameSummary + " // " + niceDate;
    } else {
      return niceDate;
    }
  });
  Handlebars.registerHelper('SpaceAndLocation', function() {
    var out;
    out = [];
    if (this.Space) {
      out.push(this.Space);
    }
    if (this.Location) {
      out.push(this.Location);
    }
    if (out) {
      return out.join(' â€“ ');
    }
  });
  Handlebars.registerHelper('hrIfNeeded', function() {
    var above, below, type, _i, _len, _ref;
    below = false;
    _ref = ['combinedProjects', 'Exhibitions', 'Excursions', 'Workshops'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (this[type] && (this[type].length > 0)) {
        below = true;
      }
    }
    above = this.IsGroup || this.ClassName === 'Exhibition' || (this.Categories && this.Categories.length > 0) || (this.Websites && this.Websites.length > 0) ? true : false;
    if (above && below) {
      return '<hr/>';
    } else {
      return '';
    }
  });
  Handlebars.registerHelper('portfoliolist', function(items, title, ignorePublish) {
    var length, out;
    length = 0;
    out = '<ul>';
    _.each(items, function(item) {
      if (item.IsPublished || ignorePublish === true) {
        out += '<li><a href="/' + item.TempUrlPrefix + '/' + item.UglyHash + '/">' + item.Title + '</a></li>';
        return length++;
      }
    });
    out += '</ul>';
    title += length > 1 ? 's' : '';
    if (length) {
      return ("<h4>" + title + "</h4>") + out;
    } else {
      return '';
    }
  });
  Handlebars.registerHelper('personlist', function(persons) {
    var out;
    out = '<ul>';
    _.each(persons, function(person) {
      return out += '<li><a href="/about/' + person.UrlSlug + '/">' + person.FirstName + ' ' + (person.Surname ? person.Surname : '') + '</a></li>';
    });
    out += '</ul>';
    return "<h4>Contributors</h4>" + out;
  });
  Handlebars.registerHelper('commaSeparatedWebsites', function(websites) {
    var a;
    a = [];
    _.each(websites, function(website) {
      return a.push("<a href=\"" + website.Link + "\">" + website.Title + "</a>");
    });
    return a.join(', ');
  });
  return Portfolio;
});
