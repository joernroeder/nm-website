// Generated by CoffeeScript 1.6.3
define(['app'], function(app) {
  var SuperProject;
  SuperProject = app.module();
  SuperProject.Model = Backbone.JJRelationalModel.extend({
    idArrayOfRelationToClass: function(classType, relKey) {
      if (relKey == null) {
        relKey = void 0;
      }
      if (this.get('ClassName') === 'Project' && classType === 'Project') {
        return this.get('ChildProjects').getIDArray().concat(this.get('ParentProjects').getIDArray());
      } else if (this.get('ClassName') === classType) {
        return [];
      }
      relKey = relKey ? relKey : classType + 's';
      return this.get(relKey).getIDArray();
    },
    /* @deprecated
    			hasRelationTo: (classType, id) ->
    				idArray = @idArrayOfRelationToClass classType
    				if _.indexOf(idArray, id) < 0 then false else true
    */

    setRelCollByIds: function(relKey, ids) {
      var className, idArrayOfRelationToClass, relColl, _changed,
        _this = this;
      _changed = false;
      if (relColl = this.get(relKey)) {
        className = relColl.model.prototype.storeIdentifier;
        idArrayOfRelationToClass = this.idArrayOfRelationToClass(className, relKey);
        _.each(ids, function(id) {
          if (_.indexOf(idArrayOfRelationToClass, id) < 0) {
            _changed = true;
            return relColl.add(id);
          }
        });
        _.each(_.difference(idArrayOfRelationToClass, ids), function(id) {
          var model;
          _changed = true;
          model = relColl.get(id);
          if (model) {
            return relColl.remove(model);
          } else if (relKey === 'Projects') {
            relColl = _this.get('ParentProjects');
            return relColl.remove(relColl.get(id));
          }
        });
      }
      return _changed;
    },
    basicListWithoutCurrentMember: function(relKey) {
      var out;
      out = [];
      _.each(this.get(relKey).toJSON(), function(person) {
        var obj;
        obj = {
          ID: person.ID,
          Title: person.FirstName + ' ' + (person.Surname ? person.Surname : '')
        };
        if (obj.ID !== app.CurrentMemberPerson.id) {
          return out.push(obj);
        }
      });
      return out;
    },
    getEditorsKey: function() {
      if (this.get('ClassName') === 'Project') {
        return 'BlockedEditors';
      } else {
        return 'Editors';
      }
    }
  });
  return SuperProject;
});
