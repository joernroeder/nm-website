// Generated by CoffeeScript 1.6.2
define(['app', 'modules/Gravity', 'modules/Portfolio'], function(app, Gravity, Portfolio) {
  var Person;

  Person = app.module();
  JJRestApi.Modules.extend('Person', function(Person) {
    JJRestApi.extendModel('Person', {
      /**
      				 * @return {String} either 'student' or 'alumni' or 'employee'
      */

      getLinkingSlug: function() {
        if (this.get('IsEmployee')) {
          return 'employee';
        }
        if (this.get('IsStudent')) {
          return 'student';
        }
        if (this.get('IsAlumni')) {
          return 'alumni';
        }
        return '';
      }
    });
    return JJRestApi.extendCollection('Person', {
      foo: 'bar'
    });
  });
  Person.Views.GravityContainer = Gravity.Views.Container.extend({
    tagName: 'ul',
    className: 'gravity',
    beforeRender: function() {
      var model, modelArray, projectType, rel, rels, _i, _j, _k, _len, _len1, _len2, _ref;

      console.log('render person page with normal view');
      modelArray = [];
      rels = this.model.relations;
      _ref = app.Config.ProjectTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        projectType = _ref[_i];
        for (_j = 0, _len1 = rels.length; _j < _len1; _j++) {
          rel = rels[_j];
          if (rel.collectionType === projectType) {
            modelArray = modelArray.concat(this.model.get(rel.key).models);
          }
        }
      }
      for (_k = 0, _len2 = modelArray.length; _k < _len2; _k++) {
        model = modelArray[_k];
        this.insertView('', new Portfolio.Views.ListItem({
          model: model,
          LinkTo: 'about'
        }));
      }
      return this.insertView('', new Person.Views.InfoItem({
        model: model
      }));
    }
  });
  Person.Views.InfoItem = Backbone.View.extend({
    tagName: 'li',
    className: 'gravity-item',
    template: 'person-info-item',
    serialize: function() {
      if (this.model) {
        return this.model.toJSON();
      }
    }
  });
  Person.Views.Custom = Backbone.View.extend({
    tagName: 'div',
    className: 'custom-templ',
    initialize: function(options) {
      if (options.template) {
        return this.template = options.template;
      }
    },
    serialize: function() {
      if (this.model) {
        return this.model.toJSON();
      } else {
        return {};
      }
    },
    beforeRender: function() {
      return this._ev = $.Event('template:ready', {
        bubbles: false
      });
    },
    afterRender: function() {
      return $(document).trigger(this._ev);
    }
  });
  return Person;
});
