// Generated by CoffeeScript 1.6.2
define(['app'], function(app) {
  var ProjectSearch;

  ProjectSearch = {
    fields: {
      'Title': 'partial',
      'Teaser': function(obj, valArray) {
        return this.partialMatchFilter(obj, 'TeaserText', valArray);
      },
      'Name': function(obj, valArray) {
        return true;
      }
    },
    /**
    			 * transforms a string into an object with the searchable field as key and the possible OR values as array
    			 * @param  {String} term
    			 * @return {Object}
    */

    transformSearchTerm: function(term) {
      var els, out, segment, vals, _i, _len, _ref;

      out = {};
      _ref = term.split(';');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        els = segment.split(':');
        vals = null;
        if (els.length > 1) {
          vals = els[1].split('|');
        }
        out[els[0]] = vals;
      }
      return out;
    },
    test: function(obj, key, valArray) {
      var type;

      if (!_.isArray(valArray)) {
        valArray = [valArray];
      }
      if (type = this.fields[key]) {
        if (_.isFunction(type)) {
          return type.call(this, obj, valArray);
        } else {
          if (type === 'exact') {
            return this.exactMatchFilter(obj, key, valArray);
          } else if (type) {
            return this.partialMatchFilter(obj, key, valArray);
          }
        }
      }
      return true;
    },
    partialMatchFilter: function(obj, key, valArray) {
      var pattern, query;

      query = valArray.join('|');
      pattern = new RegExp($.trim(query), 'i');
      console.log(obj[key]);
      if (obj.hasOwnProperty(key) && pattern.test(obj[key])) {
        return true;
      }
      return false;
    },
    exactMatchFilter: function(obj, key, valArray) {
      var pattern, query, val, _i, _len;

      if (!obj.hasOwnProperty(key)) {
        return false;
      }
      for (_i = 0, _len = valArray.length; _i < _len; _i++) {
        val = valArray[_i];
        query = "^" + val + "$";
        pattern = new RegExp(query, 'i');
        if (pattern.test(val)) {
          return true;
        }
      }
      return false;
    }
  };
  return ProjectSearch;
});
