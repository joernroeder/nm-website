// Generated by CoffeeScript 1.6.2
define(['app', 'plugins/visualsearch/visualsearch'], function(app) {
  var ProjectSearch,
    _this = this;

  ProjectSearch = {
    fields: {
      'Title': 'partial',
      'Space': 'partial',
      'Location': 'partial',
      'Text': function(obj, valArray) {
        return ProjectSearch.test(obj, 'TeaserText', valArray, 'partial');
      },
      'Type': function(obj, valArray) {
        return ProjectSearch.test(obj, 'ClassName', valArray, 'partial');
      },
      'Category': function(obj, valArray) {
        var result;

        if (obj.Categories && obj.Categories.length) {
          result = true;
          _.each(valArray, function(val) {
            var out;

            out = false;
            _.each(obj.Categories, function(cat) {
              if (ProjectSearch.exactMatchFilter(cat, 'Title', val)) {
                return out = true;
              }
            });
            if (!out) {
              return result = false;
            }
          });
          return result;
        }
        return false;
      },
      'Person': function(obj, valArray) {
        var result;

        if (obj.Persons && obj.Persons.length) {
          result = true;
          _.each(ProjectSearch.partializeArray(valArray), function(val) {
            var out;

            out = false;
            _.each(obj.Persons, function(person) {
              var fullName;

              fullName = (person.FirstName ? person.FirstName + ' ' : '') + (person.Surname ? person.Surname : '');
              if (fullName.indexOf(val) >= 0) {
                return out = true;
              }
            });
            if (!out) {
              return result = false;
            }
          });
          return result;
        }
        return false;
      }
    },
    /**
    			 * transforms a string into an object with the searchable field as key and the possible OR values as array
    			 * @param  {String} term
    			 * @return {Object}
    */

    transformSearchTerm: function(term) {
      var els, out, segment, vals, _i, _len, _ref;

      out = {};
      term = decodeURI(term);
      _ref = term.split(';');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        els = segment.split(':');
        vals = null;
        if (els.length > 1) {
          vals = els[1].split('|');
        }
        out[els[0]] = vals;
      }
      return out;
    },
    makeSearchTerm: function(obj) {
      var a, a2, key, v, val, _i, _len;

      a = [];
      for (key in obj) {
        val = obj[key];
        a2 = [];
        if (!_.isArray(val)) {
          val = [val];
        }
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          v = val[_i];
          if (v) {
            a2.push(v);
          }
        }
        if (a2.length) {
          a.push("" + key + ":" + (a2.join('|')));
        }
      }
      return encodeURI(a.join(';'));
    },
    partializeArray: function(valArray) {
      var out, val, _i, _len;

      out = [];
      for (_i = 0, _len = valArray.length; _i < _len; _i++) {
        val = valArray[_i];
        out = out.concat(val.split(' '));
      }
      return out;
    },
    test: function(obj, key, valArray, forceMethod) {
      var method, result, type, val, _i, _len;

      result = true;
      if (!_.isArray(valArray)) {
        valArray = [valArray];
      }
      type = forceMethod || this.fields[key];
      if (type) {
        if (_.isFunction(type)) {
          result = type.call(this, obj, valArray);
        } else {
          if (type === 'exact') {
            method = 'exactMatchFilter';
          } else {
            method = 'partialMatchFilter';
            valArray = this.partializeArray(valArray);
          }
          for (_i = 0, _len = valArray.length; _i < _len; _i++) {
            val = valArray[_i];
            if (!this[method](obj, key, val)) {
              return false;
            }
          }
        }
      }
      return result;
    },
    partialMatchFilter: function(obj, key, val) {
      var against;

      if (!obj.hasOwnProperty(key)) {
        return false;
      }
      against = obj[key].toLowerCase();
      if (against.indexOf(val.toLowerCase()) >= 0) {
        return true;
      }
      return false;
    },
    exactMatchFilter: function(obj, key, val) {
      if (!obj.hasOwnProperty(key)) {
        return false;
      }
      if (val.toLowerCase() === obj[key].toLowerCase()) {
        return true;
      }
      return false;
    }
  };
  ProjectSearch.getVisualSearchMatches = function() {
    var matches, persons, used, wholePortfolio, year, years, _i, _len;

    wholePortfolio = app.wholePortfolioJSON();
    matches = {
      Title: [],
      Space: [],
      Location: [],
      Person: [],
      Year: [],
      Type: ['Project', 'Exhibition', 'Excursion', 'Workshop']
    };
    years = [];
    persons = [];
    used = [];
    _.each(wholePortfolio, function(m) {
      var d;

      if (m.Title) {
        matches.Title.push(m.Title);
      }
      if (m.Space) {
        matches.Space.push(m.Space);
      }
      if (m.Location) {
        matches.Location.push(m.Location);
      }
      if (m.YearSearch) {
        d = parseInt(m.YearSearch);
      }
      if (d) {
        years.push(d);
      }
      return _.each(m.Persons, function(person) {
        var fullname;

        if (person.FirstName && person.Surname) {
          fullname = "" + person.Surname + ", " + person.FirstName;
          if (_.indexOf(used, fullname) < 0) {
            persons.push({
              label: fullname,
              value: "" + person.FirstName + " " + person.Surname
            });
            return used.push(fullname);
          }
        }
      });
    });
    matches.Person = _.sortBy(persons, function(p) {
      return p.label;
    });
    years = _.sortBy(_.uniq(years), function(y) {
      return y * -1;
    });
    for (_i = 0, _len = years.length; _i < _len; _i++) {
      year = years[_i];
      matches.Year.push(year.toString());
    }
    return matches;
  };
  ProjectSearch.View = Backbone.View.extend({
    template: 'searchbar',
    id: 'searchbar',
    search: {
      'Category': []
    },
    events: {
      'click .category-filter a': 'updateCategorySearch',
      'click .btn': 'switchSearchView'
    },
    initialize: function(opts) {
      if (opts.searchTerm) {
        this.search = ProjectSearch.transformSearchTerm(opts.searchTerm);
      }
      if (!this.search.Category) {
        return this.search.Category = [];
      }
    },
    switchSearchView: function(e) {
      e.preventDefault();
      $(e.target).blur();
      this.$el.find('section').toggleClass('active');
      return false;
    },
    doSearch: function() {
      var directTo, searchTerm;

      searchTerm = ProjectSearch.makeSearchTerm(this.search);
      directTo = searchTerm ? "/portfolio/search/" + searchTerm + "/" : '/portfolio/';
      return Backbone.history.navigate(directTo, true);
    },
    updateCategorySearch: function(e) {
      var $a, i, meth, title;

      e.preventDefault();
      $a = $(e.target);
      $a.blur();
      title = $a.data('title');
      i = _.indexOf(this.search.Category, title);
      if (i < 0) {
        this.search.Category.push(title);
        meth = 'addClass';
      } else {
        this.search.Category.splice(i, 1);
        meth = 'removeClass';
      }
      $a[meth]('active');
      this.doSearch();
      return false;
    },
    initVisualSearch: function() {
      var $visSearch, autoMatches,
        _this = this;

      $visSearch = this.$el.find('.visualsearch');
      autoMatches = ProjectSearch.VisualSearchMatches = ProjectSearch.VisualSearchMatches || ProjectSearch.getVisualSearchMatches();
      this.visualSearch = VS.init({
        container: $visSearch,
        remainder: 'Text',
        callbacks: {
          search: function(query, searchCollection) {
            _this.search = {
              Category: _this.search.Category
            };
            searchCollection.each(function(facet) {
              var cat;

              cat = facet.get('category');
              if (!_this.search[cat]) {
                _this.search[cat] = [];
              }
              return _this.search[cat].push(facet.get('value'));
            });
            console.log(_this.search);
            return _this.doSearch();
          },
          facetMatches: function(callback) {
            return callback(['Type', 'Person', 'Title', 'Year', 'Space', 'Location']);
          },
          valueMatches: function(facet, searchTerm, callback) {
            switch (facet) {
              case 'Person':
                return callback(autoMatches.Person);
              case 'Title':
                return callback(autoMatches.Title);
              case 'Year':
                return callback(autoMatches.Year);
              case 'Space':
                return callback(autoMatches.Space);
              case 'Location':
                return callback(autoMatches.Location);
              case 'Type':
                return callback(autoMatches.Type);
            }
          }
        }
      });
      this.prePopulateSearchBox();
      console.log('Project search view: %o', this.search);
      return console.log(this.visualSearch);
    },
    prePopulateSearchBox: function() {
      var key, query, v, val, _i, _len, _ref;

      query = '';
      _ref = this.search;
      for (key in _ref) {
        val = _ref[key];
        if (key !== 'Category') {
          for (_i = 0, _len = val.length; _i < _len; _i++) {
            v = val[_i];
            query += "\"" + key + "\": \"" + v + "\" ";
          }
        }
      }
      return this.visualSearch.searchBox.value(query);
    },
    updateCategoryClasses: function() {
      _this = this;
      return this.$el.find('.category-filter ul a').each(function() {
        var $this, cat, title, _i, _len, _ref, _results;

        $this = $(this);
        title = $this.data('title').toLowerCase();
        _ref = _this.search.Category;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cat = _ref[_i];
          if (cat.toLowerCase() === title) {
            _results.push($this.addClass('active'));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    },
    afterRender: function() {
      this.updateCategoryClasses();
      return this.initVisualSearch();
    },
    serialize: function() {
      var json;

      json = {};
      json.Categories = _.map(app.Collections.Category.models, function(cat) {
        return {
          ID: cat.id,
          Title: cat.get('Title')
        };
      });
      return json;
    }
  });
  return ProjectSearch;
});
