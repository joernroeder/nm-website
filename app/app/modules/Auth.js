// Generated by CoffeeScript 1.6.2
define(['app'], function(app) {
  /**
  		 * This module handles all authentication stuff like login/logout, logged_in-ping
  		 *
  */

  var Auth;

  Auth = app.module();
  Auth.ping = {
    url: JJRestApi.setObjectUrl('User'),
    interval: 10000
  };
  Auth.loginUrl = 'api/v2/Auth/login';
  Auth.logoutUrl = 'api/v2/Auth/logout';
  Auth.logout = function() {
    return $.post(Auth.logoutUrl).pipe(function(res) {
      if (res.success) {
        return res;
      } else {
        return $.Deferred().reject(res);
      }
    }).done(function(res) {
      console.log('cancelling login ping');
      app.CurrentMember = {};
      return Auth.cancelLoginPing();
    }).promise();
  };
  Auth.performLoginCheck = function() {
    return $.getJSON(this.ping.url).done(function(data) {
      app.CurrentMember = data || {};
      if (data.Email) {
        return Auth.kickOffLoginPing();
      }
    }).promise();
  };
  Auth.kickOffLoginPing = function() {
    var _this = this;

    this.cancelLoginPing;
    return this.loginPing = window.setTimeout(function() {
      return _this.performLoginCheck().done(function() {
        if (!app.CurrentMember.Email) {
          return Backbone.history.navigate('/login/', true);
        }
      });
    }, this.ping.interval);
  };
  Auth.cancelLoginPing = function() {
    if (this.loginPing) {
      window.clearTimeout(this.loginPing);
      return delete this.loginPing;
    }
  };
  Auth.Views.Login = Backbone.View.extend({
    tagName: 'section',
    idAttribute: 'login-form',
    template: 'login-form',
    events: {
      'submit form': 'submitLoginForm'
    },
    submitLoginForm: function(e) {
      var email, pass, rem,
        _this = this;

      e.preventDefault();
      pass = this.$el.find('[name="password"]').val();
      email = this.$el.find('[name="email"]').val();
      rem = this.$el.find('[name="remember"]').is(':checked') === true ? 1 : 0;
      $.post(Auth.loginUrl, {
        pass: pass,
        email: email,
        remember: rem
      }).done(function(member) {
        if (member.Email) {
          app.CurrentMember = member;
          Auth.kickOffLoginPing();
        }
        return _this.render();
      });
      return false;
    },
    serialize: function() {
      return app.CurrentMember;
    }
  });
  Auth.Views.Logout = Backbone.View.extend({
    tagName: 'section',
    idAttriubte: 'logging-out',
    template: 'logging-out',
    serialize: function() {
      return app.CurrentMember;
    }
  });
  return Auth;
});
