// Generated by CoffeeScript 1.6.2
"use strict";
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function($) {
  var JJPackery, JJPackeryMan;

  JJPackery = (function() {
    /*
    		 # construct variables
    */
    JJPackery.prototype.members = function() {
      this.$window = $();
      this.$container = $();
      this.$sizing = $();
      this.$packeryEl = $();
      this.packery = null;
      this.resizeTimeout = null;
      this.updateLayout = true;
      this.rendered = 0;
      this.factor = .3;
      return this.api = {};
    };

    function JJPackery() {
      this.onResize = __bind(this.onResize, this);      this.members();
      this.init();
      this.start();
    }

    /*
    		 # fill variables
    */


    JJPackery.prototype.init = function() {
      this.$window = $(window);
      this.$container = $('.packery-wrapper');
      this.$sizing = $('.packery-test', this.$container);
      return this.$packeryEl = $('.packery', this.$container);
    };

    /*
    		 # on resize handler
    		 #
    */


    JJPackery.prototype.onResize = function() {
      var elHeight, newHeight;

      newHeight = this.$window.height();
      this.$container.height(newHeight);
      this.$packeryEl.width(Math.floor(this.$container.width() / 3) * 2);
      this.calc();
      if (this.packery && this.updateLayout) {
        this.packery.layout();
      }
      elHeight = this.$packeryEl.height();
      if (elHeight <= newHeight) {
        return this.$packeryEl.css('top', Math.floor((newHeight - elHeight) / 2));
      } else {
        return this.$packeryEl.css('top', 0);
      }
    };

    /*
    		 # returns the centered position of the given element
    		 #
    		 # @return [object] position
    */


    JJPackery.prototype.getCenterPos = function($el) {
      var elCenter, elPos;

      elPos = $el.offset();
      return elCenter = {
        top: elPos.top + $el.height() / 2,
        left: elPos.left + $el.width() / 2
      };
    };

    /*
    		 # returns the distance between two points
    		 #
    		 # @param p1 
    		 # @param p2
    		 #
    		 # @return Number
    */


    JJPackery.prototype.getLineDistance = function(p1, p2) {
      var xs, ys;

      xs = ys = 0;
      xs = p2.left - p1.left;
      xs *= xs;
      ys = p2.top - p1.top;
      ys *= ys;
      return Math.sqrt(xs + ys);
    };

    /*
    		 # applies the radial effect to all ItemElements
    		 #
    */


    JJPackery.prototype.applyRadialGravityEffect = function() {
      var packeryCenter,
        _this = this;

      packeryCenter = this.getCenterPos(this.$packeryEl);
      return $.each(this.packery.getItemElements(), function(i, el) {
        return _this._applyRadialGravityEffectToElement(el, packeryCenter);
      });
    };

    /*
    		 # applies the radial effect to the given element
    		 #
    		 # @param HTMLElement el
    		 # @param point gravity center
    */


    JJPackery.prototype._applyRadialGravityEffectToElement = function(el, center) {
      var $el, ba, bc, elPos, expFactor, margins, third, xFactor, yFactor;

      $el = $(el);
      elPos = this.getCenterPos($el);
      third = {
        top: elPos.top,
        left: center.left
      };
      ba = third.top - center.top;
      bc = elPos.left - third.left;
      expFactor = this.getLineDistance(center, elPos) * this.factor / 200;
      yFactor = (ba / Math.abs(ba)) * expFactor * this.getLineDistance(center, third);
      xFactor = (bc / Math.abs(bc)) * expFactor * this.getLineDistance(elPos, third);
      margins = {
        'margin-top': yFactor,
        'margin-left': xFactor
      };
      $el.css(margins);
      return true;
    };

    /*
    		 # init tooltip to all ItemElements
    		 #
    */


    JJPackery.prototype.initTooltips = function() {
      var _this = this;

      return $.each(this.packery.getItemElements(), function(i, el) {
        return _this._initTooltip(el);
      });
    };

    JJPackery.prototype.getApi = function() {
      return this.api || {};
    };

    JJPackery.prototype._initTooltip = function(el) {
      var $el, $metaSection, getMargin, marginOffset;

      console.log('init tooltip %O', el);
      $el = $(el);
      $metaSection = $('section[role=tooltip-content]', $el);
      marginOffset = -20;
      getMargin = function(api) {
        var $tooltip, margin;

        margin = marginOffset;
        $tooltip = $(api.tooltip);
        if ($tooltip.hasClass('qtip-pos-rb')) {
          console.log('inverse margin');
          margin *= -1;
        }
        return margin;
      };
      if ($metaSection.length) {
        $el.qtip({
          content: {
            text: $metaSection.html()
          },
          show: {
            event: 'mouseenter',
            effect: function(api) {
              $el.addClass('has-tooltip');
              return $(this).stop(true, true).css({
                'margin-left': getMargin(api)
              }).show().animate({
                'margin-left': 0,
                'opacity': 1
              }, 200);
            }
          },
          hide: {
            event: 'mouseleave',
            effect: function(api) {
              return $(this).stop(true, true).animate({
                'margin-left': getMargin(api),
                'opacity': 0
              }, 200, function() {
                $el.removeClass('has-tooltip');
                return $(this).hide();
              });
            }
          },
          /*
          					events:
          						show: (e, api) ->
          							window.currentTooltip = 
          								tip			: @
          								target		: api.target
          								targetId	: $(api.target).attr 'data-gravity-item'
          								api			: api
          
          						hide: (e, api) ->
          							window.currentTooltip = {}
          */

          position: {
            at: "right bottom",
            my: "left bottom",
            viewport: this.$container,
            adjust: {
              method: 'flip shift',
              x: 0,
              y: 10
            }
          }
        });
        return this.api = $el.qtip('api');
      }
    };

    JJPackery.prototype.update = function() {
      if (this.packery) {
        return this.packery.layout();
      }
    };

    JJPackery.prototype.destroy = function() {
      if (this.packery) {
        return this.packery.destroy();
      }
    };

    JJPackery.prototype.calc = function() {
      var $item, $stamps, i, item, itemSquare, limit, square, _ref, _ref1;

      limit = .9;
      square = this.$window.height() * this.$window.width();
      itemSquare = 0;
      $stamps = this.$packeryEl.find('.stamp');
      $stamps.each(function(i, el) {
        var $item;

        $item = $(el);
        return itemSquare += $item.width() * $item.height();
      });
      _ref = this.packery.getItemElements();
      for (i in _ref) {
        item = _ref[i];
        $item = $(item);
        itemSquare += $item.width() * $item.height();
      }
      if (itemSquare / square > limit) {
        _ref1 = this.packery.getItemElements();
        for (i in _ref1) {
          item = _ref1[i];
          $item = $(item);
          $item.width($item.width() * limit);
          $item.height($item.height * limit);
        }
        return $stamps.each(function(i, el) {
          $item = $(el);
          $item.width($item.width() * limit);
          return $item.height($item.height * limit);
        });
      }
    };

    JJPackery.prototype.start = function() {
      var _this = this;

      return this.$container.imagesLoaded(function() {
        _this.packery = new Packery(_this.$packeryEl[0], {
          containerStyle: null,
          itemSelector: '.packery-item',
          gutter: 0,
          stamped: '.stamp',
          isResizeBound: false,
          isInitLayout: false
        });
        _this.packery.on('layoutComplete', function() {
          _this.rendered++;
          if (_this.rendered === 1) {
            console.log('hidden trigger');
          } else if (!_this.$container.hasClass('loaded') && _this.rendered === 2) {
            console.log('renderd 2 -> not .loaded');
            _this.$window.trigger('resize');
          } else if (_this.rendered === 3) {
            _this.initTooltips();
            _this.applyRadialGravityEffect();
            _this.$container.addClass('loaded').addClass('has-gravity');
            console.log('loaded');
          }
          console.log('layout is complete');
          return false;
        });
        _this.onResize();
        _this.packery.layout();
        return _this.$window.on('resize', function() {
          var resizeTimeout;

          if (resizeTimeout) {
            clearTimeout(resizeTimeout);
          }
          return resizeTimeout = setTimeout(_this.onResize, 100);
        });
      });
    };

    return JJPackery;

  })();
  JJPackeryMan = function() {
    return new JJPackery;
  };
  window.JJPackeryClass = JJPackery;
  return window.JJPackeryMan = JJPackeryMan;
})(jQuery);
