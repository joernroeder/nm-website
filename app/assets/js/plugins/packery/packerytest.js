// Generated by CoffeeScript 1.6.2
"use strict";
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function($) {
  var JJPackery, JJPackeryMan;

  JJPackery = (function() {
    JJPackery.prototype.members = function() {
      this.$window = $(window);
      this.$container = $('.packery-wrapper');
      this.$sizing = $('.packery-test', this.$container);
      this.$packeryEl = $('.packery', this.$container);
      this.packery = null;
      this.resizeTimeout = null;
      this.updateLayout = true;
      this.rendered = 0;
      return this.factor = .3;
    };

    function JJPackery() {
      this.onResize = __bind(this.onResize, this);      this.members();
      this.start();
    }

    JJPackery.prototype.onResize = function() {
      var elHeight, newHeight;

      newHeight = this.$window.height();
      this.$container.height(newHeight);
      this.$packeryEl.width(Math.floor(this.$container.width() / 3) * 2);
      if (this.packery && this.updateLayout) {
        this.packery.layout();
      }
      elHeight = this.$packeryEl.height();
      if (elHeight <= newHeight) {
        return this.$packeryEl.css('top', Math.floor((newHeight - elHeight) / 2));
      } else {
        return this.$packeryEl.css('top', 0);
      }
    };

    /*
    		 # returns the centered position of the given element
    		 #
    		 # @return [object] position
    */


    JJPackery.prototype.getCenterPos = function($el) {
      var elCenter, elPos;

      elPos = $el.offset();
      return elCenter = {
        top: elPos.top + $el.height() / 2,
        left: elPos.left + $el.width() / 2
      };
    };

    /*
    		 #
    */


    JJPackery.prototype.getLineDistance = function(p1, p2) {
      var xs, ys;

      xs = ys = 0;
      xs = p2.left - p1.left;
      xs *= xs;
      ys = p2.top - p1.top;
      ys *= ys;
      return Math.sqrt(xs + ys);
    };

    JJPackery.prototype.applyRadialGravityEffect = function() {
      var packeryCenter,
        _this = this;

      packeryCenter = this.getCenterPos(this.$packeryEl);
      return $.each(this.packery.getItemElements(), function(i, el) {
        return _this._applyRadialGravityEffectToElement(el, packeryCenter);
      });
    };

    JJPackery.prototype._applyRadialGravityEffectToElement = function(el, center) {
      var $el, ba, bc, elPos, expFactor, margins, third, xFactor, yFactor;

      $el = $(el);
      elPos = this.getCenterPos($el);
      third = {
        top: elPos.top,
        left: center.left
      };
      ba = third.top - center.top;
      bc = elPos.left - third.left;
      expFactor = this.getLineDistance(center, elPos) * this.factor / 200;
      yFactor = (ba / Math.abs(ba)) * expFactor * this.getLineDistance(center, third);
      xFactor = (bc / Math.abs(bc)) * expFactor * this.getLineDistance(elPos, third);
      margins = {
        'margin-top': yFactor,
        'margin-left': xFactor
      };
      $el.css(margins);
      return true;
    };

    JJPackery.prototype.start = function() {
      var _this = this;

      return this.$container.imagesLoaded(function() {
        _this.packery = new Packery(_this.$packeryEl[0], {
          containerStyle: null,
          itemSelector: '.packery-item',
          gutter: 0,
          stamped: '.stamp',
          isResizeBound: false,
          isInitLayout: false
        });
        _this.packery.on('layoutComplete', function() {
          _this.rendered++;
          if (_this.rendered === 1) {
            console.log('hidden trigger');
          } else if (!_this.$container.hasClass('loaded') && _this.rendered === 2) {
            console.log('renderd 2 -> not .loaded');
            _this.$window.trigger('resize');
          } else if (_this.rendered === 3) {
            _this.applyRadialGravityEffect();
            _this.$container.addClass('loaded').addClass('has-gravity');
            console.log('loaded');
          }
          console.log('layout is complete');
          return false;
        });
        _this.onResize();
        _this.packery.layout();
        return _this.$window.on('resize', function() {
          var resizeTimeout;

          if (resizeTimeout) {
            clearTimeout(resizeTimeout);
          }
          return resizeTimeout = setTimeout(_this.onResize, 100);
        });
      });
    };

    return JJPackery;

  })();
  JJPackeryMan = function() {
    return new JJPackery;
  };
  window.JJPackeryClass = JJPackery;
  return window.JJPackeryMan = JJPackeryMan;
})(jQuery);
