// Generated by CoffeeScript 1.6.2
/*
	Represents the JJRestApi for global Settings, Events, Models and Collections
	
	Example: Accessible in every module via
	
		define[
			'modules/JJRestApi'
		], (JJRestApi) ->
*/

var JJRestApi;

JJRestApi = {
  url: '/api/v2/',
  extension: 'json',
  structurID: 'api-structure'
};

JJRestApi.Models = {};

JJRestApi.Collections = {};

JJRestApi.Modules = {};

JJRestApi.Modules._modules = [];

JJRestApi.Events = _.extend({}, Backbone.Events);

/* 
 #	Prototype getter
 #
 #	@param string className
 #	@return Backbone.RelationalModel based on className
*/


JJRestApi.Model = function(className) {
  if (this.Models[className]) {
    return this.Models[className];
  } else {
    return false;
  }
};

/*
 #	Collection getter
 #
 #	@param string className
 #	@return Backbone.Collection based on className
*/


JJRestApi.Collection = function(className) {
  if (this.Collections[className]) {
    return this.Collections[className];
  } else {
    return false;
  }
};

/*
 #	Register Modules and extend them after bootstrapping the app structure
 #
 #	@param Object module
 #	@param function extensions in a callback
*/


JJRestApi.Modules.extend = function(module, extension) {
  JJRestApi.Modules._modules.push({
    module: module,
    extension: extension
  });
  return true;
};

JJRestApi.extendModel = function(className, extension) {
  var model;

  extension || (extension = {});
  if (model = this.Model(className)) {
    return this.Models[className] = model.extend(extension);
  }
};

JJRestApi.extendCollection = function(className, extension) {
  var collType;

  extension || (extension = {});
  if (collType = this.Collection(className)) {
    return this.Collections[className] = collType.extend(extension);
  }
};

JJRestApi.setObjectUrl = function(className) {
  return this.url + className + '.' + this.extension;
};

/*
 #	Loads a Object from the DOM via #api-object or /api/v2/Object.extension
 #
 #	@todo check $.getJSON with xml type
 #	@return data json/xml
*/


JJRestApi.getFromDomOrApi = function(name, callback) {
  var $obj, data,
    _this = this;

  $obj = $('#api-' + name.toLowerCase());
  if ($obj.length) {
    data = $.trim($obj.html());
    if ($obj.attr('type') === 'application/json') {
      data = $.parseJSON(data);
    }
    if (callback && _.isFunction(callback)) {
      callback(data);
    }
  } else {
    $.getJSON(JJRestApi.setObjectUrl(name), function(data) {
      if (callback && _.isFunction(callback)) {
        return callback(data);
      }
    });
  }
  return data;
};

/*
 #	The Bootstrapper rebuilds the JJ_RestfulServer/Structure response as backbone-relational structure
 #
 #	@param callback function
 #	@return false
*/


JJRestApi.bootstrapWithStructure = function(callback) {
  JJRestApi.getFromDomOrApi('Structure', function(data) {
    JJRestApi.Bootstrap(data);
    if (callback && _.isFunction(callback)) {
      return callback(data);
    }
  });
  return false;
};

JJRestApi.Bootstrap = function(response) {
  data;
  config;
  var buildPrototype, className, collRegisterObj, collectionsToRegister, config, data, getRelationObj, getRelationType, isMany, module, name, relations, _i, _j, _len, _len1, _ref, _ref1,
    _this = this;

  collectionsToRegister = [];
  getRelationType = function(type) {
    relType;
    var relType;

    switch (type) {
      case 'belongs_to':
        relType = 'has_one';
        break;
      case 'has_one':
        relType = 'has_one';
        break;
      case 'has_many':
        relType = 'has_many';
        break;
      case 'many_many':
        relType = 'many_many';
        break;
      case 'belongs_many_many':
        relType = 'many_many';
    }
    return relType;
  };
  getRelationObj = function(className, relation) {
    var relType, relationObj;

    relType = getRelationType(relation.Type);
    relationObj = {
      type: relType,
      relatedModel: function() {
        return JJRestApi.Model(relation.ClassName);
      },
      key: relation.Key,
      reverseKey: relation.ReverseKey,
      includeInJSON: ['id']
    };
    if (relType !== 'has_one') {
      relationObj.collectionType = relation.ClassName;
      collectionsToRegister.push(relation.ClassName);
    }
    return relationObj;
  };
  isMany = function(type) {
    if (type = 'has_many' || 'many_many') {
      return true;
    } else {
      return false;
    }
  };
  buildPrototype = function(className, relations, config) {
    var field, i, index, modelOptions, relObj, relation, rels, _ref;

    modelOptions = {
      defaults: {}
    };
    rels = [];
    for (i in relations) {
      relation = relations[i];
      if (relObj = getRelationObj(className, relation)) {
        rels.push(relObj);
      }
    }
    if (rels.length) {
      modelOptions.relations = rels;
    }
    modelOptions.storeIdentifier = className;
    modelOptions.url = function() {
      if (this.id) {
        return JJRestApi.url + this.storeIdentifier + '/' + this.id + '.' + JJRestApi.extension;
      } else {
        return this.urlRoot;
      }
    };
    if (config && config.DefaultFields) {
      _ref = config.DefaultFields;
      for (index in _ref) {
        field = _ref[index];
        modelOptions.defaults[field] = null;
      }
    }
    _this.Models[className] = _this.Model(className).extend(modelOptions);
    return true;
  };
  config = response.Config || false;
  data = response.Config ? response.Objs : response;
  if (!data) {
    return;
  }
  for (className in data) {
    relations = data[className];
    this.Models[className] = Backbone.JJRelationalModel.extend({
      urlRoot: this.setObjectUrl(className),
      idAttribute: 'ID'
    });
    this.Collections[className] = Backbone.Collection.extend({
      url: this.setObjectUrl(className),
      comparator: function(model) {
        return model.id;
      },
      parse: function(response) {
        return response;
      }
    });
  }
  _ref = JJRestApi.Modules._modules;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    module = _ref[_i];
    module.extension.call(window, module.module);
  }
  for (className in data) {
    relations = data[className];
    buildPrototype(className, relations, config);
    this.Collections[className] = this.Collection(className).extend({
      model: this.Model(className)
    });
  }
  collRegisterObj = {};
  _ref1 = _.uniq(collectionsToRegister);
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    name = _ref1[_j];
    collRegisterObj[name] = this.Collection(name);
  }
  Backbone.JJRelational.registerCollectionTypes(collRegisterObj);
  return false;
};

JJRestApi;
